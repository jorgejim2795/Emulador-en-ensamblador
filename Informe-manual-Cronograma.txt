								    Instituto Tecnológico de Costa Rica
 
						|			     Sede San Carlos
								     Escuela de Ingeniería Electrónica
 


								    Reporte de Trabajo del Emulador MIPS


								 Laboratorio Estructura de Microprocesadores



										Integrantes:
 
									    Jose Hernández Castro
 
									    Jorge Jiménez Mora
 
									   Gabino Venegas Rodríguez
 

									      I Semestre	2017




**Descripción del diseño de software realizado en el proyecto** 

Se realizó un emulador de arquitectura MIPS en código ensamblador x86 para un sistema operativo linux 64 bits. El código cuenta con una estructura de toma de decisiones, en la cual, dado un valor determinado introducido en la decodificación de la ROM salta a una seccion de codigo en la cual se ejecuta la instrucción decodificada.

No obstante el flujo de ejecución se encuentra dentro de un loop el cual tiene la función de simular la lectura y ejecución de cada instrucción y luego de esto realiza la emulación de PC+4 tal como se realiza en una arquitectura monociclo. Cuando se presenten irregularidades en la ejecución del programa  el código es capaz de interponerse sobre el flujo de la instrucción en ejecución  y mostrar un mensaje del fallo previsto por el mismo codigo, es decir, no se presentan errores determinados por el sistema operativo sino por el mismo código.

Las diferentes formas de que se presente irregularidades en el código es cuando se dan los siguientes fallos:

	1.En la ROM se introducen caracteres no válidos (otro valor que no sea 1 o 0).
	2.Una ROM vacía.
	3.Un opcode inválido.
	4.Function inválido
	5.Una dirección de memoria no alcanzable por el código del programa.

Por otra parte se realizó un código aparte del código principal el cual contiene macros sobre funciones que se utilizan muy comúnmente, tal como la impresión de numeros en consola y el guardado de datos en el documento resultado.txt. Estos macros reciben únicamente los valores a ejecutar, es decir, en el macro de guardado en el documento resultado.txt este recibe únicamente la cadena de texto y la longitud del mismo. El propósito de aplicar este tipo de macros es ahorrar líneas de código de tal manera que solo cambiara el dato a introducir.



**Principales retos a resolver y cómo se resolvieron **

*Guardar ROM.txt en memoria*
Un reto crítico fue poder guardar la ROM.txt en el espacio reservado de memoria,convirtiendo los caracteres ASCII en bits de cada instrucción. Se duró 2 semanas en la resolución de este aparentemente difícil reto, que se logró por la asesoría del profesor en el un día de revisión.

*Imprimir números*
	Otro reto complicado fue imprimir los numeros en consola debido a que estos están en formato binario, decimal o hexadecimal, es decir, fue necesario realizar un método de obtención de código ASCII a partir del número contenido en memoria o registro. De igual forma este método se modificó para que detectara si el número era positivo o negativo y a partir de esto imprimiera el signo de menos antes del número pasado a complemento A2, es decir, obtener la magnitud del número positivamente para poder mostrarlo de forma adecuada sin modificar el dato actual.


*Argumentos*
	Debido a que se utilizó gcc, el modo en que se recuperan los argumentos del stack dificultan el diseño de un código que lo realice. Primeramente se escribió un código tipo ld que se realizaba esa tarea, pero ya que no se pudo enlazar argumentos de librerías de 64 bits, es por eso que se tradujo código en c a nasm para determinar cómo funciona el flujo de los  argumentos con el compilador gcc y así  implementarlo en la solución del problema.


*Guardar números en el Resultado.txt*
	Hubo complicaciones al momento de guardar números en el archivo de texto creado al final del programa debido a que no se puede realizar directamente en el código, por lo que se necesitó buscar a profundidad información para poder diseñar un algoritmo capaz de realizar esa tarea.


*Detectar y guardar números sin y con signo*
	Cuando un número era negativo al ser un número de 32 bits en caso de ser el valor de un registro o 16 bits en caso de un immediate fue necesario hacer una extensión de signo a 64 bits para que los registros del x86 detectar el número como negativo de los contrario el número se tomaba como un número muy grande, luego de aplicar la extensión se operaba en registros de 64 bits y se volvían a guardar en los registros emulados como datos de 32 bits.
Por otro lado para no tener inconvenientes con las instrucciones sin signo se crearon otras funciones las cuales no hacían la extensión de signo y son usadas para dichas instrucciones.


** Posibles mejoras  para el programa** 

	1. Una mejora fácil de implementar sería agregar más instrucciones para que el emulador pueda ejecutar más códigos y pueda ser más útil, esto se puede lograr 		   mediante la implementación de las instrucciones faltantes de la arquitectura mips.
	2. Podría agregarse la opción de poder inicializar más registros o poder modificar el valor inicial del pc para poder correr una parte específica del código.
	3. Mostrar el valor del registro modificado después de la ejecución de la instrucción
	4. Mostrar el valor de todos los registros al finalizar el registro 

 
**Conclusiones sobre el problema** 

	1. En caso de compilar usando gcc no es posible utilizar la función pop para la recuperación de los argumentos del programa 
	2. El conocimiento adquirido para lograr la realización de este proyecto es útil para el futuro debido a que Linux es una plataforma amigable para desarrollar 		   aplicaciones.
	3. Se logró mejorar la pericia para la resolución de los problemas que se deben enfrentar como profesionales ingenieros.
	4. Se desarrolló la habilidad de investigación para problemas especificos utilizando el internet como herramienta principal.
	5. Se utilizó adecuadamente los recursos de hardware proporcionados por la arquitectura x86 sobre linux.
	 
** Herramientas para el desarrollo del proyecto **

Para familiarizarnos con el lenguaje ensamblador x86 fue de gran ayuda los tutoriales introductorios del canal de youtube “Kupala”, el link con la lista de reproducción se encuentra en las referencias bibliográficas, de estos tutoriales se tomó una librería que usó como base y se modificó para las funciones de impresión en pantalla y escritura en el archivo .txt

De igual forma una herramienta muy utilizada durante el desarrollo fue el debugger GDB el cual nos permite comprobar el buen funcionamiento del programa al visualizar los contenidos de los registros del x86.
También fue necesario la inclusión de una función escrita en c para poder desplegar en pantalla la información del procesador que se solicitaba al finalizar la ejecución del programa.

**Referencias bibliográficas**
 
	1. Albert, M., & Gerard, M. (s.f.). Programacion en ensamblador (x86-64). Univesidad Oberta de Catalunya.

	2. multiples ejemple de emsamblador x86
	https://www.youtube.com/watch?v=VQAKkuLL31g&list=PLetF-YjXm-sCH6FrTz4AQhfH6INDQvQSn

	3. Programación en x86-64 formato digital:
	https://www.exabyteinformatica.com/uoc/Informatica/Estructura_de_computadores/Estructura_de_computadores_(Modulo_6).pdf

	4. tutorial x86:
 	http://askubuntu.com/questions/15433/unable-to-lock-the-administration-directory-var-lib-dpkg-is-another-process

	5. como usar git desde consola: 	
	https://try.github.io/levels/1/challenges/1




------------------------------------------------------------------------------------------------------------------------------------------------------------------------






							      Instituto Tecnológico de Costa Rica
								 
								       Sede San Carlos
								 
							      Manual de usuario para emulador MIPS
							    Laboratorio Estructura de Microprocesadores
								 
								     José Hernández Castro
								 
								      Jorge Jiménez Mora
								 
									Gabino Venegas
								 
								           I semestre
								 
								              2017
 
 
 
 
 
El presente manual indica el funcionamiento general y utilización del emulador mips programado en ensamblador x86 diseñado para el curso de laboratorio de estructuras de microprocesadores.


Este emulador tiene como función ejecutar las instrucciones generales de un emulador y así como el funcionamiento del mecanismo que permiten su ejecución tales como el stack el pc entre otros.

Para su utilización lo primero que se necesita es colocar en la carpeta del ejecutable un archivo .txt con el nombre ROM el cual debe contener el conjunto de instrucciones que se deben ejecutar en el emulador, el límite de instrucciones es de 100 por lo cual no debe excederse ya que no serán tomadas en cuenta para la ejecución. (Albert & Gerard)El emulador también permite la opción de ingresar argumentos al ejecutarse dichos argumentos inicializaran los registros a0-a3 con los valores ingresados estos valores se deben ingresar en formato decimal, además de ser números de 4 dígitos como máximo.
Importante mencionar que para ejecutar el programa debe abrirse una terminal en la carpeta donde este el ejecutable y utilizar la instrucción “. /emulador arg1 arg2 arg3 arg4”.

Después el programa indicara si encontró la ROM esperara a que se presione el “enter” para continuar, luego mostrara las instrucciones que se ejecutan y al final mostrara los resultados almacenados.
Las direcciones de memoria van del 0 al 400 para la memoria de datos del programa y del 401 al 800 para el stack esto debe tomarse en cuenta al direccionar jumps o branchs

En caso de indicar un opcode o fuction no validos según las instrucciones se indicará en pantalla y el programa terminara, también en caso de ser una dirección que exceda el limite se indicara en pantalla y finalizara el programa, en caso de ingresar un valor diferente de 1 o 0 se enviara un mensaje indica que no es un carácter valido. 
 
 



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Reportes concretos de avances semanales
 
 
Semana 1:
- Se estudió el documento de apoyo del proyecto para entender el funcionamiento de la compilación y ejecución de un programa en ensamblador x86 sobre Linux, también se obtuvo información de videos de programación en ensamblador, libros y manuales de internet. El principal reto de esta semana fue leer la ROM y guardarla en memoria, pero se podría guiar con un video de Linux Assembly en YouTube
 
Semana 2:
- Se logra leer la ROM y guardarla en formato char en memoria únicamente. El reto es pasar de caracteres ASCII de la ROM.txt a bits en memoria para luego poder ejecutar las instrucciones dadas en la ROM.txt.
 
 
Semana 3:
- Se logra guardar de manera correcta las instrucciones de ROM.txt en la memoria del programa, también se realizó la mayoría de instrucciones MIPS, además se pudo imprimir la información del CPU. No obstante el nuevo reto es poder realizar de manera correcta el guardado de la impresión en un archivo resultado.
 
Semana 4:
- Se imprimieron los datos de la CPU que faltaban, como el porcentaje usado, también se continuó con el desarrollo de las instrucciones.
 
Semana 5:
- Se imprime la operación que se está ejecutando. Adicionalmente se trabajó en la escritura del archivo Resultado.txt y en la manipulación de los argumentos por parte del compilador ld.
 
Semana 6:
- Se logró guardar de manera adecuada lo resultados en el archivo txt, manipular los argumentos utilizando gcc. Sumado a esto se corrigieron errores menores y se optimizó la información sobre las fallas y se añadió la posibilidad de introducir argumentos con 4 caracteres.

